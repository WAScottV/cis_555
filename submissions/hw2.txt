// Async util function used to read files.

const fs = require('fs');

const readFile = (path) => {
    return new Promise((resolve, reject) => {
        fs.readFile(path, 'utf8', (err, data) => {
            if (err) {
                reject(err);
            } else {
                resolve(data);
            }
        });
    });
};

module.exports = {
    readFile: readFile,
};

// ******
// ****** PROBLEM 2-2
// ******

const hammingDist = (dna1, dna2) => {

    let hDist = 0;
    for (i = 0; i < dna1.length; i++) {
        if (dna1.substring(i, i + 1) !== 
            dna2.substring(i, i + 1)) {

                hDist++;
        }
    }
    return hDist;
};

module.exports = {
    hammingDist: hammingDist,
};



// ******
// ****** PROBLEM 2-3
// ******

const freqWithMismatches = (text, k, mismatchCount) => {
    const vals = [];
    let max = 0;

    const combos = generateNucleotideCombos(k);
    // iterate over all possible kmers and check for occurrence in string.
    combos.forEach(kmer => {
        const cur = occurrencesWithMismatches(text, kmer, mismatchCount);

        // track the max count for filtering at the end.
        max = cur.count > max ? cur.count : max;
        vals.push(cur);
    });

    // only return kmers that occr 'max' times
    return vals.filter(v => v.count === max)
        .map(obj => obj.kmer)
        .filter(uniqueValues);
};

// check whole DNA string and return # of occurrences of pattern
// with no more than mismatchCount mismatches
const occurrencesWithMismatches = (text, pattern, mismatchCount) => {
    const len = pattern.length;
    let retVal = 0;
    for (let i = 0; i <= text.length - len; i++) {
        const hd = hammingDist(text.substring(i, i + len), pattern);
        if (hd <= mismatchCount) {
            retVal++;
        }
    }
    return { kmer: pattern, count: retVal };
}

const hammingDist = (dna1, dna2) => {
    let hDist = 0;
    for (let i = 0; i < dna1.length; i++) {
        if (dna1.substring(i, i + 1) !==
            dna2.substring(i, i + 1)) {
            hDist++;
        }
    }
    return hDist;
};

// create all possible nucleotiede combos for given count nuclCount
const generateNucleotideCombos = (nuclCount) => {
    const combinations = [];
    const totalCombos = Math.pow(4, nuclCount);

    for (let i = 0; i < totalCombos; i++) {
        // generate base 4 numbers to maps to A,C,G,T
        combinations.push(toBase4(i, nuclCount));
    }

    // map base 4 to nuc. letter
    return combinations.map(l => mapToNucleotides(l));

};

const toBase4 = (num, digits) => {
    let temp = num.toString(4);
    return temp.padStart(digits, '0');
}

// 0 = A; 1 = C; 2 = G; 3 = T
const map = ['A', 'C', 'G', 'T'];

const mapToNucleotides = (base4String) => {
    let str = '';
    for (let char of base4String) {
        str += map[parseInt(char)];
    }
    return str;
};

const uniqueValues = (value, index, self) => {
    return self.indexOf(value) === index;
};

// main();

module.exports = {
    freqWithMismatches: freqWithMismatches,
};



// ******
// ****** PROBLEM 2-4
// ******

const motifEnumeration = (dna, k, d) => {
    const patterns = {};

    // loop over all strings in dna
    for (let string of dna) {

        // get all qualifying kmers
        const kmers = findKmerWithMismatch(string, k, d);
        for (let kmer of kmers) {

            // increment counter for each time kmer is found
            // in one of the strings
            if (patterns[kmer]) {
                patterns[kmer]++;
            } else {
                patterns[kmer] = 1;
            }
        }
    }

    // return only kmers that are found in all strings.
    const inEveryString = [];
    Object.keys(patterns).forEach(p => {
        if (patterns[p] === dna.length) inEveryString.push(p);
    });
    return inEveryString;
};

const findKmerWithMismatch = (text, k, mismatchCount) => {
    const vals = [];

    const combos = generateNucleotideCombos(k);
    // iterate over all possible kmers and check for occurrence in string.
    combos.forEach(kmer => {
        const cur = occurrencesWithMismatches(text, kmer, mismatchCount);
        vals.push(cur);
    });
    return vals.filter(v => v.count > 0)
        .map(obj => obj.kmer)
        .filter(uniqueValues);
};

// create all possible nucleotiede combos for given count nuclCount
const generateNucleotideCombos = (nuclCount) => {
    const combinations = [];
    const totalCombos = Math.pow(4, nuclCount);

    for (let i = 0; i < totalCombos; i++) {
        // generate base 4 numbers to maps to A,C,G,T
        combinations.push(toBase4(i, nuclCount));
    }

    // map base 4 to nuc. letter
    return combinations.map(l => mapToNucleotides(l));

};

// check whole DNA string and return # of occurrences of pattern
// with no more than mismatchCount mismatches
const occurrencesWithMismatches = (text, pattern, mismatchCount) => {
    const len = pattern.length;
    let retVal = 0;
    for (let i = 0; i <= text.length - len; i++) {
        const hd = hammingDist(text.substring(i, i + len), pattern);
        if (hd <= mismatchCount) {
            retVal++;
        }
    }
    return { kmer: pattern, count: retVal };
}

const hammingDist = (dna1, dna2) => {
    let hDist = 0;
    for (let i = 0; i < dna1.length; i++) {
        if (dna1.substring(i, i + 1) !==
            dna2.substring(i, i + 1)) {
            hDist++;
        }
    }
    return hDist;
};

const toBase4 = (num, digits) => {
    let temp = num.toString(4);
    return temp.padStart(digits, '0');
}

// 0 = A; 1 = C; 2 = G; 3 = T
const map = ['A', 'C', 'G', 'T'];

const mapToNucleotides = (base4String) => {
    let str = '';
    for (let char of base4String) {
        str += map[parseInt(char)];
    }
    return str;
};

const uniqueValues = (value, index, self) => {
    return self.indexOf(value) === index;
};

module.exports = {
    motifEnumeration: motifEnumeration,
};

// ******
// ****** PROBLEM 2-5
// ******

a) This is not true. say you have the following five strings:

    ACGT
    ACGT
    AGGG
    AGGG
    GCCG

This gives us a consensus string of:

    ACGG
    
which does not appear as a string or substring of any of the strings.

b) 

Code used to obtain answer:

const map = ['A', 'C', 'G', 'T'];

// represents possible characters at each position
// numbers map to characters in map array above
// -1 means character is not possible at this position
const vals = [[0, 1, 2, 3], [0, 1, 2, 3], 
                [-1, -1, 2, -1], [0, 1, 2, 3], 
                [-1, -1, 2, 3], [0, 1, -1, -1]];

const getCombos = () => {
    const result = [];
    for (let i = 0; i < Math.pow(4, 6); i++) {
        let thisPoss = '', position = 0;

        // get base 4 string and reverse to start with LSB first in for loop
        let temp = toBase4(i).split('').reverse().join('');
        for(let char of temp) {

            // if possibility exists, append to string.
            // else, break and continue.
            const num = parseInt(char);
            if (vals[position++][num] !== -1) {
                thisPoss += map[num];
            } else {
                break;
            }
        }
        if (thisPoss.length === 6) {
            result.push(thisPoss);
        }
    }
    console.log(result.join(' '))
};

const toBase4 = (num) => {
    let temp = num.toString(4);
    return temp.padStart(6, '0');
}

getCombos();

// ANSWER

AAGAGA CAGAGA GAGAGA TAGAGA ACGAGA CCGAGA GCGAGA TCGAGA AGGAGA CGGAGA GGGAGA TGGAGA ATGAGA CTGAGA GTGAGA TTGAGA AAGCGA 
CAGCGA GAGCGA TAGCGA ACGCGA CCGCGA GCGCGA TCGCGA AGGCGA CGGCGA GGGCGA TGGCGA ATGCGA CTGCGA GTGCGA TTGCGA AAGGGA CAGGGA 
GAGGGA TAGGGA ACGGGA CCGGGA GCGGGA TCGGGA AGGGGA CGGGGA GGGGGA TGGGGA ATGGGA CTGGGA GTGGGA TTGGGA AAGTGA CAGTGA GAGTGA 
TAGTGA ACGTGA CCGTGA GCGTGA TCGTGA AGGTGA CGGTGA GGGTGA TGGTGA ATGTGA CTGTGA GTGTGA TTGTGA AAGATA CAGATA GAGATA TAGATA 
ACGATA CCGATA GCGATA TCGATA AGGATA CGGATA GGGATA TGGATA ATGATA CTGATA GTGATA TTGATA AAGCTA CAGCTA GAGCTA TAGCTA ACGCTA 
CCGCTA GCGCTA TCGCTA AGGCTA CGGCTA GGGCTA TGGCTA ATGCTA CTGCTA GTGCTA TTGCTA AAGGTA CAGGTA GAGGTA TAGGTA ACGGTA CCGGTA 
GCGGTA TCGGTA AGGGTA CGGGTA GGGGTA TGGGTA ATGGTA CTGGTA GTGGTA TTGGTA AAGTTA CAGTTA GAGTTA TAGTTA ACGTTA CCGTTA GCGTTA 
TCGTTA AGGTTA CGGTTA GGGTTA TGGTTA ATGTTA CTGTTA GTGTTA TTGTTA AAGAGC CAGAGC GAGAGC TAGAGC ACGAGC CCGAGC GCGAGC TCGAGC 
AGGAGC CGGAGC GGGAGC TGGAGC ATGAGC CTGAGC GTGAGC TTGAGC AAGCGC CAGCGC GAGCGC TAGCGC ACGCGC CCGCGC GCGCGC TCGCGC AGGCGC 
CGGCGC GGGCGC TGGCGC ATGCGC CTGCGC GTGCGC TTGCGC AAGGGC CAGGGC GAGGGC TAGGGC ACGGGC CCGGGC GCGGGC TCGGGC AGGGGC CGGGGC 
GGGGGC TGGGGC ATGGGC CTGGGC GTGGGC TTGGGC AAGTGC CAGTGC GAGTGC TAGTGC ACGTGC CCGTGC GCGTGC TCGTGC AGGTGC CGGTGC GGGTGC 
TGGTGC ATGTGC CTGTGC GTGTGC TTGTGC AAGATC CAGATC GAGATC TAGATC ACGATC CCGATC GCGATC TCGATC AGGATC CGGATC GGGATC TGGATC 
ATGATC CTGATC GTGATC TTGATC AAGCTC CAGCTC GAGCTC TAGCTC ACGCTC CCGCTC GCGCTC TCGCTC AGGCTC CGGCTC GGGCTC TGGCTC ATGCTC 
CTGCTC GTGCTC TTGCTC AAGGTC CAGGTC GAGGTC TAGGTC ACGGTC CCGGTC GCGGTC TCGGTC AGGGTC CGGGTC GGGGTC TGGGTC ATGGTC CTGGTC 
GTGGTC TTGGTC AAGTTC CAGTTC GAGTTC TAGTTC ACGTTC CCGTTC GCGTTC TCGTTC AGGTTC CGGTTC GGGTTC TGGTTC ATGTTC CTGTTC GTGTTC 
TTGTTC