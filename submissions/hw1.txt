// Async util function used to read files.

const fs = require('fs');

const readFile = (path) => {
    return new Promise((resolve, reject) => {
        fs.readFile(path, 'utf8', (err, data) => {
            if (err) {
                reject(err);
            } else {
                resolve(data);
            }
        });
    });
};

module.exports = {
    readFile: readFile,
};



/***********
PROBLEM 1-2
************/

const util = require('../util');

// run program
const main = () => {
    util.readFile(process.argv[2])
        .then(text => console.log(count(text, process.argv[3])))
        .catch(console.log);
};

const count = (text, pattern) => {
    kmerLen = pattern.length;
    kmerCount = 0;
    
    // iterate over string
    for (i = 0; i < text.length; i++) {
        if (text.substring(i, i + kmerLen) === pattern) {
            // pattern matches; increment count
            kmerCount++;
        }
    }
    return kmerCount;
};

main();



/***********
PROBLEM 1-3
************/

const util = require('../util');

// run program.
const main = () => {
    util.readFile(process.argv[2])
        .then(text => {
            console.log(count(text, parseInt(process.argv[3])));
        })
        .catch(console.log);
};

const count = (text, k) => {
    const tempData = {};
    let max = 1;

    // iterate over string.
    for (i = 0; i <= text.length - k; i++) {
        if(tempData[text.substring(i, i + k)]) {
            // kmer already present; increment kmer count
            tempData[text.substring(i, i + k)]++;
            if (tempData[text.substring(i, i + k)] > max) {
                // found the (currently) most frequent kmer.
                max++;
            }
        } else {
            //new kmer
            tempData[text.substring(i, i + k)] = 1;
        }
    }
    let kmerString = '';

    // loop over all kmers
    for (const kmer in tempData) {
        if (tempData[kmer] === max) {
            //max kmer found. append to string.
            kmerString += `${kmer} `;
        }
    }
    return kmerString;
};

main();



/***********
PROBLEM 1-4
************/

const util = require('../util');

// run program
const main = () => {
    util.readFile(process.argv[2])
        .then(file => console.log(reverseComp(file)))
        .catch(console.log);
};

const reverseComp = (pattern) => {
    compliment = [];
    for (let i = 0; i < pattern.length; i++) {
        // record compliment in same position in array.
        switch (pattern.charAt(i)) {
            case 'A':
                compliment[i] = 'T';
                break;
            case 'T':
                compliment[i] = 'A';
                break;
            case 'G':
                compliment[i] = 'C';
                break;
            case 'C':
                compliment[i] = 'G';
                break;
        }
    }
    // reverse array and create string.
    return compliment.reverse().join('');
};

main();



/***********
PROBLEM 1-5
************/

const util = require('../util');

//run program.
const main = () => {
    util.readFile(process.argv[2])
        .then(file => console.log(findClumps(file, parseInt(process.argv[3]), 
            parseInt(process.argv[4]), parseInt(process.argv[5]))))
        .catch(console.log);
};

const findClumps = (genome, k, L, t) => {
    const clumps = {};

    // log clump to array
    const logClump = (kmer) => {
        if (clumps[kmer]) {
            clumps[kmer].push(i);
        } else {
            clumps[kmer] = [i];
        }
    };

    // iterate over whole genome string
    for (i = 0; i <= genome.length - k; i++) {
        const kmer = genome.substring(i, i + k);
        logClump(kmer);
    }

    // see if there are enough clumps (at least t clumps in the whole string)
    const getClumpsMeetingFreqCrit = () => 
        Object.values(clumps).filter(kmers => kmers.length >= t);

    const clumpsOfQty_t = getClumpsMeetingFreqCrit();
    let clumpStarts = [];

    // check to see if freq. occurring clumps happen within L positions of each other.
    clumpsOfQty_t.forEach(clump => {
        let startPos = returnClumpStartIfQualifies(clump, L, t);
        if (startPos) {
            clumpStarts.push(startPos);
        }
    });

    let clumpString = '';
    
    // generate clump string
    for (i = 0; i < clumpStarts.length; i ++) {
        const s = clumpStarts[i];
        clumpString += genome.substring(s, s + k) + ' ';
    }
    return clumpString;
};

// determine distance of clump start to clump end.
const returnClumpStartIfQualifies = (arr, L, t) => {
    const window = { start: 0, end: t - 1 };

    const qualifiesAsClump = () => arr[window.end] - arr[window.start] <= L;

    while (arr.length > window.end) {
        if (qualifiesAsClump()) {
            return arr[window.start];
        }
        window.start++;
        window.end++;
    }
    return null;
};

main();